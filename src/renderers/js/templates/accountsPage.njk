{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ imports }}

{% if account.data.link %}
  {{ macros.docblock(account.docs) }}
  export type {{ account.name | pascalCase }} = Account<{{ account.data.link.name | pascalCase }}>;
{% else %}
  {{ macros.docblock(account.docs) }}
  export type {{ account.name | pascalCase }} = Account<{{ account.name | pascalCase }}AccountData>;

  {{ macros.exportType(account.name | pascalCase + 'AccountData', typeManifest) }}

  {{ macros.exportSerializer(account.name | pascalCase + 'AccountData', typeManifest) }}
{% endif %}

export function deserialize{{ account.name | pascalCase }}(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount,
): {{ account.name | pascalCase }} {
  return deserializeAccount(rawAccount, get{{ account.name | pascalCase }}AccountDataSerializer(context));
}

export async function fetch{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions,
): Promise<{{ account.name | pascalCase }}> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, '{{ account.name | pascalCase }}');
  return deserialize{{ account.name | pascalCase }}(context, maybeAccount);
}

export async function safeFetch{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions,
): Promise<{{ account.name | pascalCase }} | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserialize{{ account.name | pascalCase }}(context, maybeAccount)
    : null;
}

export async function fetchAll{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions,
): Promise<{{ account.name | pascalCase }}[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, '{{ account.name | pascalCase }}');
    return deserialize{{ account.name | pascalCase }}(context, maybeAccount);
  });
}

export async function safeFetchAll{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions,
): Promise<{{ account.name | pascalCase }}[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserialize{{ account.name | pascalCase }}(context, maybeAccount as RpcAccount));
}

export function get{{ account.name | pascalCase }}GpaBuilder(context: Pick<Context, 'rpc' | 'serializer' | 'programs'>) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey('{{ program.name | camelCase }}', '{{ program.publicKey }}');
  return gpaBuilder(context, programId)
    .registerFields<{{ gpaFields.type }}>({{ gpaFields.argument }})
    .deserializeUsing<{{ account.name | pascalCase }}>((account) => deserialize{{ account.name | pascalCase }}(context, account))
    {%- if discriminator.kind === 'field' %}
      .whereField('{{ discriminator.name }}', {{ discriminator.value }})
    {% elif discriminator.kind === 'size' %}
      .whereSize({{ discriminator.value }})
    {% endif -%}
  ;
}

{% if account.size !== undefined %}
export function get{{ account.name | pascalCase }}Size(): number {
  return {{ account.size }};
}
{% endif %}

{% if seeds.length > 0 %}
export function find{{ account.name | pascalCase }}Pda(
  context: Pick<Context, 'eddsa' | 'programs'{% if pdaHelperNeedsSerializer %} | 'serializer'{% endif %}>,
  {% if hasVariableSeeds %}
    seeds: {
      {% for seed in seeds %}
        {% if seed.kind === 'variable' %}
          {{ macros.docblock(seed.docs) }}
          {{ seed.name | camelCase }}: {{ seed.typeManifest.looseType }};
        {% endif %}
      {% endfor %}
    }
  {% endif %}
): Pda {
  {% if pdaHelperNeedsSerializer %}
    const s = context.serializer;
  {% endif %}
  const programId = context.programs.getPublicKey('{{ program.name | camelCase }}', '{{ program.publicKey }}');
  return context.eddsa.findPda(programId, [
    {% for seed in seeds %}
      {% if seed.kind === 'programId' %}
        programId.bytes,
      {% elif seed.kind === 'constant' %}
        {{ seed.typeManifest.serializer }}.serialize({{ seed.value.render }}),
      {% else %}
        {{ seed.typeManifest.serializer }}.serialize(seeds.{{ seed.name | camelCase }}),
      {% endif %}
    {% endfor %}
  ]);
}

export async function fetch{{ account.name | pascalCase }}FromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  {% if hasVariableSeeds %}
    seeds: Parameters<typeof find{{ account.name | pascalCase }}Pda>[1],
  {% endif %}
  options?: RpcGetAccountOptions,
): Promise<{{ account.name | pascalCase }}> {
  return fetch{{ account.name | pascalCase }}(context, find{{ account.name | pascalCase }}Pda(context{% if hasVariableSeeds %}, seeds{% endif %}), options);
}

export async function safeFetch{{ account.name | pascalCase }}FromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc' | 'serializer'>,
  {% if hasVariableSeeds %}
    seeds: Parameters<typeof find{{ account.name | pascalCase }}Pda>[1],
  {% endif %}
  options?: RpcGetAccountOptions,
): Promise<{{ account.name | pascalCase }} | null> {
  return safeFetch{{ account.name | pascalCase }}(context, find{{ account.name | pascalCase }}Pda(context{% if hasVariableSeeds %}, seeds{% endif %}), options);
}
{% endif %}
{% endblock %}
